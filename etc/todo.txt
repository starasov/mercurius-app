Configuration Management
------------------------

+ Check how to continuously read logs for particular application.

+ Check how to use logging facilities inside the application: log levels,
  app configuration, etc.

+ Decide where to place icons in the application stage headers. How to properly
  place header icon on the right side:
    * see sample code of contacts application

- Unit testing of the application.
    - no-ui way of the testing
    - IDE integration
    + ant integration
    + restore all previously disabled tests
    - mojo xUnit impl: http://developer.palm.com/index.php?id=1827&option=com_content&view=article

+ Configure intelliarts VPN connection and add sources under VCS - added under GitHub
  repository.

+ Check how to include resources into application package and the way how
  to read included resources.
    * it seems http get could be helpful here.

+ Check where DB can be located in the emulator file system.
    * use winscp: root/root

+ Download latest mojo sdk (1.4)

- Check out plug-in APIs from mojo skd 1.4


Misc
----

- Get graphics for application.


General
-------

- Write persistence layer prototype.
    - Think about possible ways of the database migration mechanism.

    - Check if there are any possibility to check if device has media or
      only built-in storage exists - it might be helpful for DB creation.

    + Check transaction types available in HTML 5 implementation under webos.
      It seems that there are two different transaction types exists: read-only
      and non-read-only transactions:
        * looks like read-only transaction doesn't work

+ Think about possible forms approach for new/edit views (django way could fit there quite well).

- Think about extraction of reusable UI components: headers, progress spinners, etc.

- Think about extraction of reusable assistants logic: busy/ready states switching, retrieving manager instance.

- Error handling logic and dialogs

- Add custom logging facility to support per component/class/package logging configuration

- Add extra models for each query type (like SELECT, DELETE, UPDATE, COUNT) which will behave like
  separate builders for SQL query building.

- Create main app screen.

Currencies
----------

+ Add home currency setting functionality

+ Add basic delete currency functionality


Accounts
--------

+ Finish validation functionality
